name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (full or filesystem)'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - full
          - filesystem

jobs:
  test-full-version:
    name: Test Full Version (with MinIO/Nessie)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_mode != 'filesystem' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        working-directory: ./tests
        run: npm ci
      
      - name: Install Playwright Browsers
        working-directory: ./tests
        run: npx playwright install --with-deps chromium
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start services
        run: |
          # Use CI-optimized compose file with prebuilt images
          docker compose -f docker-compose-ci.yml up -d
          
          echo "Waiting for services to start..."
          sleep 15
          
          # Check service status
          docker compose -f docker-compose-ci.yml ps
          
          # Wait for SQL Server specifically (most critical service)
          echo "Waiting for SQL Server to be ready..."
          for i in {1..40}; do
            if docker exec iceberg-mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'Strong@Password123' -Q "SELECT 1" -C 2>/dev/null; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Waiting for SQL Server... ($i/40)"
            sleep 5
          done
          
          # Wait for dashboard to be ready
          echo "Waiting for dashboard to be ready..."
          for i in {1..20}; do
            if docker exec iceberg-dashboard curl -f http://localhost:8000/api/status 2>/dev/null; then
              echo "Dashboard is ready!"
              break
            fi
            echo "Waiting for dashboard... ($i/20)"
            sleep 5
          done
          
          # Final status check with logs if needed
          docker compose -f docker-compose-ci.yml ps
          if ! docker compose -f docker-compose-ci.yml ps | grep -q "Up"; then
            echo "Some services failed to start. Showing logs:"
            docker compose -f docker-compose-ci.yml logs
          fi
      
      - name: Check dashboard accessibility
        run: |
          echo "Checking if dashboard is accessible..."
          for i in {1..30}; do
            if curl -f http://localhost:8000 2>/dev/null; then
              echo "Dashboard is accessible!"
              break
            fi
            echo "Waiting for dashboard... ($i/30)"
            sleep 2
          done
          
          # Check API
          curl -f http://localhost:8000/api/status || echo "Warning: API not responding yet"
      
      - name: Run health check tests
        working-directory: ./tests
        env:
          TEST_MODE: full
          CI: true
        run: npx playwright test tests/health-check.spec.ts --reporter=list
      
      - name: Run Playwright tests - Full Version
        working-directory: ./tests
        env:
          TEST_MODE: full
          CI: true
        run: npx playwright test tests/dashboard-full.spec.ts --reporter=github,html
      
      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-full
          path: tests/playwright-report/
          retention-days: 30
      
      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-videos-full
          path: tests/test-results/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: docker compose -f docker compose-ci.yml down -v

  test-filesystem-version:
    name: Test Filesystem Version (no MinIO/Nessie)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_mode != 'full' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        working-directory: ./tests
        run: npm ci
      
      - name: Install Playwright Browsers
        working-directory: ./tests
        run: npx playwright install --with-deps chromium
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create data directories
        run: |
          mkdir -p data/warehouse
          chmod -R 777 data/warehouse
      
      - name: Start filesystem services
        run: |
          # Start filesystem services
          docker compose -f docker compose-filesystem.yml up -d --build
          
          echo "Waiting for services to start..."
          sleep 10
          
          # Check service status
          docker compose -f docker compose-filesystem.yml ps
          
          # Wait for SQL Server specifically
          echo "Waiting for SQL Server to be ready..."
          for i in {1..60}; do
            if docker exec iceberg-mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'Strong@Password123' -Q "SELECT 1" -C 2>/dev/null; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Waiting for SQL Server... ($i/60)"
            sleep 3
          done
          
          # Give services time to stabilize
          echo "Waiting for services to stabilize..."
          sleep 15
          
          # Final status check
          docker compose -f docker compose-filesystem.yml ps
          docker compose -f docker compose-filesystem.yml logs --tail=20
      
      - name: Check dashboard accessibility
        run: |
          echo "Checking if dashboard is accessible..."
          for i in {1..30}; do
            if curl -f http://localhost:8000 2>/dev/null; then
              echo "Dashboard is accessible!"
              break
            fi
            echo "Waiting for dashboard... ($i/30)"
            sleep 2
          done
          
          # Check API
          curl -f http://localhost:8000/api/status || echo "Warning: API not responding yet"
      
      - name: Run health check tests
        working-directory: ./tests
        env:
          TEST_MODE: filesystem
          CI: true
        run: npx playwright test tests/health-check.spec.ts --reporter=list
      
      - name: Run Playwright tests - Filesystem Version
        working-directory: ./tests
        env:
          TEST_MODE: filesystem
          CI: true
        run: npx playwright test tests/dashboard-filesystem.spec.ts --reporter=github,html
      
      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-filesystem
          path: tests/playwright-report/
          retention-days: 30
      
      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-videos-filesystem
          path: tests/test-results/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: docker compose -f docker compose-filesystem.yml down -v

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-full-version, test-filesystem-version]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-full-version.result }}" == "success" ]]; then
            echo "✅ Full version tests passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-full-version.result }}" == "skipped" ]]; then
            echo "⏭️ Full version tests skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Full version tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-filesystem-version.result }}" == "success" ]]; then
            echo "✅ Filesystem version tests passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-filesystem-version.result }}" == "skipped" ]]; then
            echo "⏭️ Filesystem version tests skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Filesystem version tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed reports in the artifacts section." >> $GITHUB_STEP_SUMMARY